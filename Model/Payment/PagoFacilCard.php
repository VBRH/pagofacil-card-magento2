<?php

declare(strict_types=1);

namespace PagoFacil\Payment\Model\Payment;

use Magento\Payment\Model\Method\Cc;
use PagoFacil\Payment\Model\Payment\Interfaces\Card;
use Magento\Payment\Model\InfoInterface;

class PagoFacilCard extends Cc implements Card
{
    /**
     * PagoFacilCard constructor.
     * @param \Magento\Framework\Model\Context $context
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory
     * @param \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory
     * @param \Magento\Payment\Helper\Data $paymentData
     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
     * @param \Magento\Payment\Model\Method\Logger $logger
     * @param \Magento\Framework\Module\ModuleListInterface $moduleList
     * @param \Magento\Framework\Stdlib\DateTime\TimezoneInterface $localeDate
     * @param \Magento\Framework\Model\ResourceModel\AbstractResource|null $resource
     * @param \Magento\Framework\Data\Collection\AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        \Magento\Framework\Model\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory,
        \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory,
        \Magento\Payment\Helper\Data $paymentData,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Magento\Payment\Model\Method\Logger $logger,
        \Magento\Framework\Module\ModuleListInterface $moduleList,
        \Magento\Framework\Stdlib\DateTime\TimezoneInterface $localeDate,
        ?\Magento\Framework\Model\ResourceModel\AbstractResource $resource = null,
        ?\Magento\Framework\Data\Collection\AbstractDb $resourceCollection = null,
        array $data = []
    ){
        parent::__construct(
            $context,
            $registry,
            $extensionFactory,
            $customAttributeFactory,
            $paymentData,
            $scopeConfig,
            $logger,
            $moduleList,
            $localeDate,
            $resource,
            $resourceCollection,
            $data
        );

        $this->_isGateway = true;
        $this->_canOrder = true;
        $this->_canCapture = true;
        $this->_canCapturePartial = true;
        $this->_canRefund = true;
        $this->_canRefundInvoicePartial = true;
        $this->_debugReplacePrivateDataKeys = [
            'number',
            'exp_month',
            'exp_year',
            'cvc'
        ];
        $this->_code = static::CODE;
        $this->logger->debug(["esta cosa esta activa o mejor me muero?" => $this->isActive()]);
    }

    public function capture(InfoInterface $payment, $amount)
    {
        return parent::capture($payment, $amount); // TODO: Change the autogenerated stub
    }

    public function authorize(InfoInterface $payment, $amount)
    {
        return parent::authorize($payment, $amount); // TODO: Change the autogenerated stub
    }
}