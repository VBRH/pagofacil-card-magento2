<?php

declare(strict_types=1);

namespace PagoFacil\Payment\Model\Payment;

use Exception;
use Magento\Customer\Model\Address;
use Magento\Customer\Model\Customer;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\{DataObject, Exception\LocalizedException, Registry};
use Magento\Payment\Model\InfoInterface;
use Magento\Sales\Model\Order;
use Magento\Sales\Model\Order\Payment;
use PagoFacil\Payment\Model\Payment\Abstracts\Offline;
use PagoFacil\Payment\Source\Client\Interfaces\ClientInterface;
use PagoFacil\Payment\Source\Client\PrimitiveRequest;
use PagoFacil\Payment\Source\Register;
use PagoFacil\Payment\Source\Transaction\Charge;
use Psr\Log\LoggerInterface;
use PagoFacil\Payment\Model\Payment\Interfaces\CashInterface;
use PagoFacil\Payment\Source\Client\PagoFacil as Client;
use PagoFacil\Payment\Source\User\Client as UserClient;
use PagoFacil\Payment\Exceptions\{ClientException, PaymentException, AmountException};

class Cash extends Offline implements CashInterface
{
    use ConfigData;

    public function authorize(InfoInterface $payment, $amount)
    {
        /** @var Payment $payment */
        /** @var Order $order */
        /** @var Charge $charge */
        /** @var LoggerInterface $logger */
        /** @var Client $httpClient */

        if ($amount <= 0) {
            throw new AmountException('Invalid amount auth');
        }

        $logger = ObjectManager::getInstance()->get(LoggerInterface::class);
        $httpClient = Register::bringOut('client');
        $order = $payment->getOrder();

        $request = new PrimitiveRequest(
            ClientInterface::POST,
            $this->buildRequest($order)
        );

        $response = $httpClient->sendRequest($request);

        try {
            $order->setStatus(Order::STATE_PENDING_PAYMENT);
            $order->setState(Order::STATE_PENDING_PAYMENT);
        } catch (ClientException|LocalizedException|Exception $exception) {
            $logger->error($exception->getMessage());
        } catch (PaymentException $exception) {
            $logger->error($exception->getMessage());
        }
        $payment->setTransactionId(64654);
        $payment->setParentTransactionId(64654);
        $payment->setIsTransactionClosed(false);

        $this->getInfoInstance()->setAdditionalInformation('', '');

        return $this;
    }

    public function capture(InfoInterface $payment, $amount)
    {
        /** @var Payment $payment */
        /** @var Order $order */
        /** @var UserClient $user */
        /** @var Customer $customer */
        /** @var LoggerInterface $logger */
        /** @var Address $billingAddress */
        /** @var Charge $charge */

        $logger = ObjectManager::getInstance()->get(LoggerInterface::class);
        $order = $payment->getOrder();
        $order->setStatus(Order::STATE_PENDING_PAYMENT);

        if (is_null($payment->getParentTransactionId())) {
            $this->authorize($payment, $amount);
        }
        throw new ClientException('no money');

        $order->setStatus(Order::STATE_PROCESSING);
        $payment->setIsTransactionClosed(true);

        return parent::capture($payment, $amount); // TODO: Change the autogenerated stub
    }

    protected function init(): void
    {
        $this->getUrlEnviroment('uri_cash');
    }
}
